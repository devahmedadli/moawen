## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Admin Freelancer Management'
description: |-

  APIs for managing freelancers
endpoints:
  -
    httpMethods:
      - GET
    uri: api/freelancers
    metadata:
      groupName: 'Admin Freelancer Management'
      groupDescription: |-

        APIs for managing freelancers
      subgroup: ''
      subgroupDescription: ''
      title: 'List all freelancers'
      description: 'Get a paginated list of all freelancers.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      sort_by:
        name: sort_by
        description: 'Field to sort by (e.g., created_at, name).'
        required: false
        example: created_at
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort_order:
        name: sort_order
        description: 'Sort direction (asc or desc).'
        required: false
        example: desc
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'Number of items per page.'
        required: false
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      sort_by: created_at
      sort_order: desc
      per_page: 15
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [
             {
               "id": 1,
               "name": "John Doe",
               "email": "john@example.com",
               "created_at": "2024-03-20T12:00:00Z"
             }
           ],
           "success": true,
           "message": "تم جلب المستخدمين بنجاح",
           "status": 200,
           "meta": {
             "pagination": {
               "total": 50,
               "per_page": 15,
               "current_page": 1,
               "last_page": 4
             }
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 200
        content: |-
          {
           "data": null,
           "success": false,
           "message": "خطا ف البرامز",
           "status": 422/500,
           "meta": {
             "errors": [
                   'sortBy'=> 'Invalid filter parameters'  // 422 error example
                   'message'=> 'Invalid filter parameters' // 500 error example
                   ],
           }
          }
        headers: []
        description: filure
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/freelancers
    metadata:
      groupName: 'Admin Freelancer Management'
      groupDescription: |-

        APIs for managing freelancers
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new freelancer'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the freelancer.'
        required: true
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email of the freelancer.'
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password (min 8 characters).'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: john@example.com
      password: password123
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
           "data": {
             "id": 1,
             "name": "John Doe",
             "email": "john@example.com",
             "created_at": "2024-03-20T12:00:00Z"
           },
           "message": "تم إنشاء المستخدم بنجاح",
           "success": true,
           "status": 201
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: |-
          {
           "message": "Invalid filter parameters",
           "success": false,
           "status": 422,
           "errors": {
             "email": ["The email has already been taken."],
             "password": ["The password must be at least 8 characters."]
           }
          }
        headers: []
        description: validation_error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/freelancers/{id}'
    metadata:
      groupName: 'Admin Freelancer Management'
      groupDescription: |-

        APIs for managing freelancers
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified resource.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the freelancer.'
        required: true
        example: rerum
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: rerum
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 500
        content: '{"success":false,"message":"Error processing request","data":null,"meta":{"errors":{"message":"SQLSTATE[42S22]: Column not found: 1054 Unknown column ''users.deleted_at'' in ''where clause'' (Connection: mysql, SQL: select * from `users` where `role` = freelancer and `users`.`id` = rerum and `users`.`deleted_at` is null limit 1)"}}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/freelancers/{id}'
    metadata:
      groupName: 'Admin Freelancer Management'
      groupDescription: |-

        APIs for managing freelancers
      subgroup: ''
      subgroupDescription: ''
      title: 'Update the specified resource in storage.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the freelancer.'
        required: true
        example: aliquid
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: aliquid
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must not be greater than 255 characters.'
        required: false
        example: doyxlpdgqwfvfw
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      email:
        name: email
        description: ''
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      name: doyxlpdgqwfvfw
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/freelancers/{id}'
    metadata:
      groupName: 'Admin Freelancer Management'
      groupDescription: |-

        APIs for managing freelancers
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove the specified resource from storage.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the freelancer.'
        required: true
        example: saepe
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: saepe
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
